class Solution {
    public int findCity(int n, int m, int[][] edges, int distanceThreshold) {
        // Create an adjacency matrix representation of the graph
        int[][] graph = new int[n][n];
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            graph[u][v] = graph[v][u] = w;
        }

        // Find the shortest distance between each pair of cities using Floyd-Warshall algorithm
        int[][] dist = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
            dist[i][i] = 0;
        }
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1], w = edge[2];
            dist[u][v] = dist[v][u] = w;
        }
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE) {
                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }

        // Count the number of reachable cities for each city within the distanceThreshold
        int minReachable = Integer.MAX_VALUE;
        int cityWithMinReachable = -1;
        for (int i = 0; i < n; i++) {
            int reachable = 0;
            for (int j = 0; j < n; j++) {
                if (dist[i][j] <= distanceThreshold) {
                    reachable++;
                }
            }
            if (reachable <= minReachable) {
                minReachable = reachable;
                cityWithMinReachable = i;
            } else if (reachable == minReachable && i > cityWithMinReachable) {
                cityWithMinReachable = i;
            }
        }

        return cityWithMinReachable;
    }
}
    
    /*
     Time complexity: O(n^3)
     Space Complecity: O(n^2) 
*/
