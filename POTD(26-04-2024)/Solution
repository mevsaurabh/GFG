//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.lang.*;
import java.util.*;

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int[][] matrix = new int[n][m];
            for (int i = 0; i < n; i++) {
                String[] S = br.readLine().split(" ");
                for (int j = 0; j < m; j++) {
                    matrix[i][j] = Integer.parseInt(S[j]);
                }
            }
            Solution ob = new Solution();
            int[] ans = ob.FindExitPoint(n, m, matrix);
            for (int i = 0; i < ans.length; i++) System.out.print(ans[i] + " ");
            System.out.println();
        }
    }
}

// } Driver Code Ends


// User function Template for Java

class Solution {
    public int[] FindExitPoint(int n, int m, int[][] matrix) {
        // Initialize direction vectors
        int[] direction = {0, 1}; // Initially moving right
        int row = 0, col = 0;

        while (true) {
            // If the current cell is 1, change direction
            if (matrix[row][col] == 1) {
                if (direction[0] == 0 && direction[1] == 1) {
                    direction[0] = 1;
                    direction[1] = 0;
                } else if (direction[0] == 1 && direction[1] == 0) {
                    direction[0] = 0;
                    direction[1] = -1;
                } else if (direction[0] == 0 && direction[1] == -1) {
                    direction[0] = -1;
                    direction[1] = 0;
                } else if (direction[0] == -1 && direction[1] == 0) {
                    direction[0] = 0;
                    direction[1] = 1;
                }
                matrix[row][col] = 0; // Mark the current cell as 0
            }

            // Calculate the next position
            int nrow = row + direction[0];
            int ncol = col + direction[1];

            // Check if the next position is out of bounds
            if (nrow < 0 || nrow >= n || ncol < 0 || ncol >= m) {
                return new int[]{row, col}; // Return the exit point
            }

            // Update the current position
            row = nrow;
            col = ncol;
        }
    }
}
