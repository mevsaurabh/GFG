class Solution {
    ArrayList<String> NBitBinary(int N) {
        ArrayList<String> result = new ArrayList<>();
        generateBinaryStrings(N, 0, "", result);
        return result;
    }

    private void generateBinaryStrings(int N, int numOnes, String current, ArrayList<String> result) {
        if (current.length() == N) {
            if (numOnes >= N - numOnes) {
                result.add(current);
            }
            return;
        }

        // We need to append a '1' first to ensure the prefix condition is satisfied
        generateBinaryStrings(N, numOnes + 1, current + "1", result);

        // We can append a '0' only if the number of 1's so far is greater than the number of 0's
        if (numOnes > current.length() - numOnes) {
            generateBinaryStrings(N, numOnes, current + "0", result);
        }
    }
}

/* 
Time Complexity: O(2^n)
Space Complexity: O(2^n)

visual representation of how the algorithm works for N = 3
generateBinaryStrings(3, 0, "")
    Append '1'
    generateBinaryStrings(3, 1, "1")
        Append '1'
        generateBinaryStrings(3, 2, "11")
            Append '1'
            generateBinaryStrings(3, 3, "111")
                Add "111" to result
            numOnes (2) > current.length() - numOnes (1)
            Append '0'
            generateBinaryStrings(3, 2, "110")
                Add "110" to result
        numOnes (1) > current.length() - numOnes (1)
        Append '0'
        generateBinaryStrings(3, 1, "10")
            Append '1'
            generateBinaryStrings(3, 2, "101")
                Add "101" to result
    numOnes (0) < current.length() - numOnes (1)
    Do not append '0'
*/
