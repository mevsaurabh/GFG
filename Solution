class Solution:
    def doIntersect(self, p1, q1, p2, q2):
        def orientation(p, q, r):
            val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
            if val == 0:
                return 0 
            return 1 if val > 0 else 2  

        if len(p1) != 2 or len(q1) != 2 or len(p2) != 2 or len(q2) != 2:
            return "false"

        if p1 == q1 == p2 == q2:
            return "true"

        if p1 == p2 or p1 == q2 or q1 == p2 or q1 == q2:
            return "true"

        o1 = orientation(p1, q1, p2)
        o2 = orientation(p1, q1, q2)
        o3 = orientation(p2, q2, p1)
        o4 = orientation(p2, q2, q1)

        if o1 != o2 and o3 != o4:
            return "true"


        if o1 == 0 and o2 == 0 and o3 == 0 and o4 == 0:
            return "true" if (min(p1[0], q1[0]) <= max(p2[0], q2[0]) and
                              max(p1[0], q1[0]) >= min(p2[0], q2[0]) and
                              min(p1[1], q1[1]) <= max(p2[1], q2[1]) and
                              max(p1[1], q1[1]) >= min(p2[1], q2[1])) else "false"

        return "false"
