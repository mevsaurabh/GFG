class Solution {
    private static final int MOD = 1000000007;

    private static int solve(int i, int target, int[] arr, int[][] dp) {
        if (i == 0) {
            return (target == 0) ? 1 : 0;
        }

        if (dp[i][target] != -1) {
            return dp[i][target];
        }

        dp[i][target] = solve(i - 1, target, arr, dp) % MOD;

        if (arr[i - 1] <= target) {
            dp[i][target] += solve(i - 1, target - arr[i - 1], arr, dp);
            dp[i][target] %= MOD;
        }

        return dp[i][target];
    }

    public static int countPartitions(int n, int d, int[] arr) {
        int total = 0;
        for (int num : arr) {
            total += num;
        }

        if (total < d || (total - d) % 2 == 1) {
            return 0;
        }

        int target = (total - d) / 2;
        int[][] dp = new int[n + 1][target + 1];

        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return solve(n, target, arr, dp);
    }
}
     
