
class Solution {
    public static int longestSubseq(int n, int[] a) {
         // Initialize the dp[] array with 1 as a
        // single element will be of length 1
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
        }

        // Start traversing the given array
        for (int i = 1; i < n; i++) {
            // Compare with all the previous elements
            for (int j = 0; j < i; j++) {
                // If the absolute difference is 1,
                // then consider this subsequence
                // and update dp[i] if required.
                if (Math.abs(a[i] - a[j]) == 1) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
        }

        // Longest length will be the maximum
        // value of dp array.
        int result = 1;
        for (int i = 0; i < n; i++) {
            if (result < dp[i]) {
                result = dp[i];
            }
        }

        return result;
    }
}
