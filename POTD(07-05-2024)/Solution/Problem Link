class Tree {
    public ArrayList<Integer> reverseLevelOrder(Node node) {
        // Create an empty list to store the reverse level order traversal
        ArrayList<Integer> result = new ArrayList<>();
        
        // Base case: If the root is null, return an empty list
        if (node == null) {
            return result;
        }
        
        // Create a queue for level order traversal
        Queue<Node> queue = new LinkedList<>();
        queue.offer(node);
        
        // Perform reverse level order traversal using a queue
        while (!queue.isEmpty()) {
            Node curr = queue.poll();
            result.add(0, curr.data); // Add the current node at the beginning of the list
            
            // Add right child first, then left child to the queue
            if (curr.right != null) {
                queue.offer(curr.right);
            }
            if (curr.left != null) {
                queue.offer(curr.left);
            }
        }
        
        return result;
    }
}
