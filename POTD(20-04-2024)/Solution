class Solution {
    public static ArrayList<Integer> findUnion(int[] arr1, int[] arr2, int n, int m) {
        // Create a new ArrayList to store the union
        ArrayList<Integer> union = new ArrayList<>();
        
        // Two pointers to iterate through the arrays
        int i = 0, j = 0;
        
        // Traverse through both arrays
        while (i < n && j < m) {
            // If the current element in arr1 is smaller than the current element in arr2
            if (arr1[i] < arr2[j]) {
                // Add the element to the union if it's not already present
                if (union.isEmpty() || union.get(union.size() - 1) != arr1[i]) {
                    union.add(arr1[i]);
                }
                i++; // Move to the next element in arr1
            } else if (arr1[i] > arr2[j]) {
                // Add the element to the union if it's not already present
                if (union.isEmpty() || union.get(union.size() - 1) != arr2[j]) {
                    union.add(arr2[j]);
                }
                j++; // Move to the next element in arr2
            } else {
                // Add the common element to the union only once
                if (union.isEmpty() || union.get(union.size() - 1) != arr1[i]) {
                    union.add(arr1[i]);
                }
                i++; // Move to the next element in arr1
                j++; // Move to the next element in arr2
            }
        }
        
        // Add the remaining elements from arr1 (if any)
        while (i < n) {
            if (union.isEmpty() || union.get(union.size() - 1) != arr1[i]) {
                union.add(arr1[i]);
            }
            i++;
        }
        
        // Add the remaining elements from arr2 (if any)
        while (j < m) {
            if (union.isEmpty() || union.get(union.size() - 1) != arr2[j]) {
                union.add(arr2[j]);
            }
            j++;
        }
        
        return union;
    }
}

