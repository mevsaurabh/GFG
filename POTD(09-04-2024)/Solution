class Solution {
    public int minPoints(int[][] points, int m, int n) {
        int[][] dp = new int[m][n];

        // Initialize the last cell
        dp[m - 1][n - 1] = points[m - 1][n - 1] > 0 ? 1 : Math.abs(points[m - 1][n - 1]) + 1;

        // Fill the last row
        for (int i = m - 2; i >= 0; i--) {
            dp[i][n - 1] = Math.max(dp[i + 1][n - 1] - points[i][n - 1], 1);
        }

        // Fill the last column
        for (int j = n - 2; j >= 0; j--) {
            dp[m - 1][j] = Math.max(dp[m - 1][j + 1] - points[m - 1][j], 1);
        }

        // Fill the remaining cells
        for (int i = m - 2; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                dp[i][j] = Math.max(Math.min(dp[i + 1][j], dp[i][j + 1]) - points[i][j], 1);
            }
        }

        return dp[0][0];
    }
}
/* 
  Space complexity : O(n*m)
  Time complexity : O(n*m)
*/
