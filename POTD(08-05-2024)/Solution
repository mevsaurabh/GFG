class Solution {
    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        traverseAndCollectPaths(root, new ArrayList<>(), result);
        return result;
    }

    private static void traverseAndCollectPaths(Node node, ArrayList<Integer> currentPath, ArrayList<ArrayList<Integer>> result) {
        if (node == null) {
            return;
        }

        currentPath.add(node.data);

        // If we reach a leaf node, add the current path to the result
        if (node.left == null && node.right == null) {
            result.add(new ArrayList<>(currentPath));
        } else {
            // Traverse the left and right subtrees
            traverseAndCollectPaths(node.left, currentPath, result);
            traverseAndCollectPaths(node.right, currentPath, result);
        }

        // Backtrack by removing the current node from the path
        currentPath.remove(currentPath.size() - 1);
    }
}
