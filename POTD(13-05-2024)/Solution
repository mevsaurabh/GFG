
class Solution {
    static ArrayList<ArrayList<Integer>> adj;
    static boolean[] visited;

    public static int findNumberOfGoodComponent(int e, int v, int[][] edges) {
        adj = new ArrayList<>();
        for (int i = 0; i <= v; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        visited = new boolean[v + 1];
        int goodComponents = 0;

        for (int i = 1; i <= v; i++) {
            if (!visited[i]) {
                ArrayList<Integer> component = new ArrayList<>();
                dfs(i, component);

                if (isFullyConnected(component)) {
                    goodComponents++;
                }
            }
        }

        return goodComponents;
    }

    private static void dfs(int node, ArrayList<Integer> component) {
        visited[node] = true;
        component.add(node);

        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, component);
            }
        }
    }

    private static boolean isFullyConnected(ArrayList<Integer> component) {
        int size = component.size();
        for (int node : component) {
            if (adj.get(node).size() != size - 1) {
                return false;
            }
        }
        return true;
    }
}
