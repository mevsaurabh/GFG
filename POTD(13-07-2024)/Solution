from typing import List
import heapq

class Solution:
    def shortestPath(self, n: int, m: int, edges: List[List[int]]) -> List[int]:
        graph = {i: [] for i in range(1, n+1)}
        for a, b, w in edges:
            graph[a].append((b, w))
            graph[b].append((a, w))

        distances = {i: float('inf') for i in range(1, n+1)}
        distances[1] = 0

        heap = [(0, 1)]
        while heap:
            dist, node = heapq.heappop(heap)
            if dist > distances[node]:
                continue
            for neighbor, weight in graph[node]:
                new_dist = dist + weight
                if new_dist < distances[neighbor]:
                    distances[neighbor] = new_dist
                    heapq.heappush(heap, (new_dist, neighbor))

        if distances[n] == float('inf'):
            return [-1]
        else:
            path = [n]
            curr = n
            while curr != 1:
                for neighbor, weight in graph[curr]:
                    if distances[curr] == distances[neighbor] + weight:
                        path.append(neighbor)
                        curr = neighbor
                        break
            return [distances[n]] + path[::-1]
